/*{
  "type": "action",
  "label": "Export",
  "image": "figure.run",
  "identifier": "com.tomyail.omnifocus-status.export"
}*/
(() => {

  preferences = new Preferences() // NO ID = PLUG-IN ID
	console.log(preferences.identifier)

    // Preference keys
    const PREF_KEYS = {
        DAYS_AGO: 'exportDaysAgo',
        API_TOKEN: 'apiToken',
        API_ENDPOINT: 'apiEndpoint'
    };
    // Default value for days ago
    const DEFAULT_DAYS_AGO = 7;

    const action = new PlugIn.Action(async function (selection, sender) {

      // Read initial configuration from preferences
      const apiToken = preferences.readString(PREF_KEYS.API_TOKEN);
      const apiEndpoint = preferences.readString(PREF_KEYS.API_ENDPOINT);
      const exportDaysAgo = preferences.readNumber(PREF_KEYS.DAYS_AGO);

      // Validate preferences
      if (!apiToken || !apiEndpoint || exportDaysAgo === null) {
          let missing = [];
          if (!apiEndpoint) missing.push('API Endpoint');
          if (!apiToken) missing.push('API Token');
          if (exportDaysAgo === null) missing.push('Export Days Ago');
          
          new Alert(
              "Configuration Missing", 
              `The following setting(s) are missing or invalid: ${missing.join(', ')}. Please run the 'Configure Export Settings' action first.`
          ).show();
          return; // Stop the action
      }

      // Proceed with the rest of the action using the validated preferences
      console.log('Using API Token:', apiToken ? '********' : 'Not Set'); // Avoid logging token directly
      console.log('Using API Endpoint:', apiEndpoint);
      console.log('Using Export Days Ago:', exportDaysAgo);

      // Configuration: API Endpoint URL
      // EXPORT_DAYS_AGO and API_TOKEN are now read from preferences

      const rootFolders = flattenedFolders.filter(
        (folder) => folder.parent === null
      );
  
      const folderStatus = {
        active: Folder.Status.Active,
        dropped: Folder.Status.Dropped,
      };
      const tagStatus = {
        active: Tag.Status.Active,
        dropped: Tag.Status.Dropped,
        onHold: Tag.Status.OnHold,
      };
  
      const projectStatus = {
        active: Project.Status.Active,
        dropped: Project.Status.Dropped,
        onHold: Project.Status.OnHold,
        done: Project.Status.Done,
      };
  
      const taskStatus = {
        available: Task.Status.Available,
        blocked: Task.Status.Blocked,
        completed: Task.Status.Completed,
        dropped: Task.Status.Dropped,
        dueSoon: Task.Status.DueSoon,
        next: Task.Status.Next,
        overdue: Task.Status.Overdue,
      };
      const getStatus = (data, statusMap, propKey = 'status') => {
        const target = Object.entries(statusMap).find(([key, value]) => {
          if (data[propKey] === value) {
            return true;
          }
          return false;
        });
        if (!target) {
          console.log('status not found', data.status, statusMap);
        }
        return target[0];
      };
  
      const applyDatabaseObject = (data, result) => {
        result.primaryKey = data.id.primaryKey;
      };
      const applyDatedObject = (data, result) => {
        result.added = data.added;
        result.modified = data.modified;
        applyDatabaseObject(data, result);
      };
      const applyActiveObject = (data, result) => {
        result.active = data.active;
        result.effectiveActive = data.effectiveActive;
        applyDatedObject(data, result);
      };
  
      const createFolder = (folder) => {
        const result = {};
        applyActiveObject(folder, result);
  
        result.type = 'folder';
        result.name = folder.name;
        result.status = getStatus(folder, folderStatus);
        result.children = folder.folders.map(createFolder);
  
        result.projects = folder.projects.map(createProject);
        return result;
      };
  
  
      const createProject = (project) => {
        const result = {};
        applyActiveObject(project, result);
  
        result.type = 'project';
        result.name = project.name;
        result.status = getStatus(project, projectStatus);
  
        result.task = createTask(project.task);
        return result;
      };
  
      const createTask = (task) => {
        const result = {};
        applyActiveObject(task, result);
  
        result.type = 'task';
        result.name = task.name;
        result.status = getStatus(task, taskStatus, 'taskStatus');
  
        // result.tasks = task.tasks.map(createTask);
        return result;
      };
  
      const sendPost = async (url, body) => {
        const request = URL.FetchRequest.fromString(url);
        request.method = 'POST';
        request.headers = {
          'content-type': 'application/json',
          'Authorization': `Bearer ${apiToken}`,
        };


        request.bodyString = JSON.stringify(body);
        const response = await request.fetch();
  
        const responseCode = response.statusCode;
        if (responseCode >= 200 && responseCode < 300) {
          const responseJSON = JSON.parse(response.bodyString);
          return responseJSON;
        } else {
          console.error('Error:', response.bodyString);
          throw {
            name: responseCode,
            message: 'There was an issue retrieving the message.',
          };
        }
      };
  
  
      const exportRootFolders = rootFolders.map(createFolder);
  
      const rootProjects = flattenedProjects.filter(
        (project) => project.parentFolder === null
      );
  
      const exportRootProjects = rootProjects.map(createProject);
      const exportInbox = inbox.map(createTask);

      const startDate = new Date();
      startDate.setDate(startDate.getDate() - exportDaysAgo);
      
      const tasks = flattenedTasks
        .filter(task => task.added >= startDate)
        .filter(task => task.taskStatus === Task.Status.Completed)
        .map(createTask)
        .sort((a, b) => b.modified - a.modified);
  

      await sendPost(apiEndpoint, { // Use the API_ENDPOINT from preferences
        tasks
      });

      await document.sync();
    });
  
    action.validate = function (selection, sender) {
      return true;
    };
  
    return action;
  })();
